{"version":3,"sources":["components/GameMenu.js","socketConfig.js","components/multiplayer/CreateGame.js","components/multiplayer/JoinGame.js","components/multiplayer/Messages.js","components/multiplayer/PlayerList.js","components/multiplayer/StartButton.js","components/multiplayer/GameInfo.js","hasWon.js","isDraw.js","components/multiplayer/Board.js","components/multiplayer/Timer.js","components/multiplayer/Game.js","components/singleplayer/StartButton.js","generateBoard.js","possiblePositions.js","minimax.js","components/singleplayer/Board.js","components/singleplayer/Game.js","components/singleplayer/DifficultySelect.js","components/BackButton.js","App.js","index.js"],"names":["GameMenu","history","id","onClick","replace","socket","io","process","PORT","CreateGame","useState","nickName","setNickName","clicked","setClicked","className","onSubmit","e","preventDefault","emit","htmlFor","autoComplete","onChange","target","value","type","JoinGame","joinID","setJoinID","error","setError","useEffect","on","errorMessage","off","class","Messages","gameID","messagesEndRef","useRef","input","setInput","messages","setMessages","msg","concat","current","scrollIntoView","behavior","message","map","index","ref","PlayerList","playerID","players","player","colour","_id","toString","renderPlayer","StartButton","GameInfo","game","gameOutcome","hasStarted","turn","length","isHosting","hasWon","board","width","height","i","j","isDraw","Board","setGame","playerColour","setGameOutcome","setTimer","setIsTimerPaused","generateBoard","matrix","Array","fill","setBoard","row","col","turnID","move","Math","floor","random","randomMove","makeMove","colIndex","result","turnTime","currentCol","handleClick","cell","rowIndex","renderCell","Timer","timer","isTimerPaused","startTime","timeElapsed","Date","getTime","intervalTime","interval","setTimeout","clearTimeout","Game","socketID","getPlayer","time","to","turnStartTime","randomNum","setYourColour","setAiColour","yourColour","start","possiblePositions","positions","push","x","y","minimax","depth","alpha","beta","maximizingPlayer","aiColour","humanColour","max","Infinity","min","bestMove","aiMove","a","SinglePlayer","difficulty","setDifficulty","string","DifficultySelect","BackButton","location","useLocation","useHistory","pathname","App","setPlayers","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a42a5014.chunk.js","sourcesContent":["import '../css/GameMenu.css';\r\n\r\nconst GameMenu = ({ history }) => {\r\n    return (\r\n        <div id=\"menu\">\r\n            <h1>Connect 4 Online</h1>\r\n            <button onClick={() => history.replace('/game/ai')}>Play against AI</button>\r\n            <button onClick={() => history.replace('/game/create')}>Create Game</button>\r\n            <button onClick={() => history.replace('/game/join')}>Join Game</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameMenu;","import io from 'socket.io-client';\r\n//const socket = io('/'); for deploymnet, io('http://localhost:3001') for local testing\r\nconst socket = io(process.env.PORT ? '/' : 'http://localhost:3001');\r\nexport default socket;","import { useState } from 'react';\r\nimport socket from '../../socketConfig';\r\nimport '../../css/Form.css'\r\n\r\nconst CreateGame = () => {\r\n    const [nickName, setNickName] = useState('');\r\n    const [clicked, setClicked] = useState(false);\r\n    const onChange = e => {\r\n        setNickName(e.target.value);\r\n    }  \r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        setClicked(true);\r\n        socket.emit('create-game', { nickName });\r\n    }\r\n    if (clicked)\r\n        return null;\r\n    return ( \r\n        <div className=\"form\">\r\n            <h1>Create Game</h1>\r\n            <form onSubmit={onSubmit}>\r\n                <label htmlFor=\"nickName\">Enter Nick Name</label>\r\n                <input autoComplete=\"off\" onChange={onChange} type=\"text\" id=\"nickName\" />\r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CreateGame;","import { useState, useEffect } from 'react';\r\nimport socket from '../../socketConfig';\r\nimport '../../css/Form.css'\r\n\r\nconst JoinGame = () => {\r\n    const [nickName, setNickName] = useState('');\r\n    const [joinID, setJoinID] = useState('');\r\n    const [error, setError] = useState(false);\r\n    const [clicked, setClicked] = useState(false);\r\n    useEffect(() => {\r\n        socket.on('error', errorMessage => {\r\n            setError(errorMessage);\r\n            setClicked(false);\r\n        });\r\n        return () => socket.off('error');\r\n    }, []);\r\n    const onNameChange = e => {\r\n        setNickName(e.target.value);\r\n    }  \r\n    const onIDChange = e => {\r\n        setJoinID(e.target.value);\r\n    }\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        setClicked(true);\r\n        socket.emit('join-game', { nickName, joinID });\r\n    }\r\n    if (clicked)\r\n        return null;\r\n    return ( \r\n        <div className=\"form\">\r\n            <h1>Join Game</h1>\r\n            <form onSubmit={onSubmit}>\r\n                {error && <div class=\"error\">{error}</div>}\r\n                <label htmlFor=\"nickName\">Enter Nick Name</label>\r\n                <input autoComplete=\"off\" value={nickName} onChange={onNameChange} type=\"text\" id=\"nickName\" />\r\n                <label htmlFor=\"gameID\">Enter Room ID</label>\r\n                <input autoComplete=\"off\" value={joinID} onChange={onIDChange} type=\"text\" id=\"gameID\" />\r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JoinGame;","import { useState, useEffect, useRef } from 'react';\r\nimport socket from '../../socketConfig';\r\nimport '../../css/Messages.css';\r\n\r\nconst Messages = ({ gameID, nickName }) => {\r\n    const messagesEndRef = useRef(null);\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    useEffect(() => {\r\n        socket.on('message', msg => {\r\n            setMessages(messages => messages.concat([ msg ]));\r\n        });\r\n        return () => socket.off('message');\r\n    }, []);\r\n    useEffect(scrollToBottom,\r\n        [messages]\r\n    );\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (input === '')\r\n            return;\r\n        const message = nickName + ': ' + input;\r\n        setMessages(messages => messages.concat([ message ]));\r\n        setInput('');\r\n        socket.emit('message', { gameID, message });\r\n    }\r\n    return (\r\n        <div id=\"message-div\">\r\n            <form onSubmit={onSubmit}>\r\n                <label htmlFor=\"message\">Send Message: </label>\r\n                <br></br>\r\n                <input autoComplete=\"off\" type=\"text\" id=\"message\" value={input} onChange={(e) => setInput(e.target.value)} />\r\n                <button>Send</button>\r\n            </form>\r\n            <div id=\"messages\">\r\n                {messages.map((message, index) => (\r\n                    <p key={index}>{message}</p>\r\n                ))}\r\n                <div ref={messagesEndRef} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Messages;","import '../../css/PlayerList.css';\r\n\r\nconst PlayerList = ({ playerID, players }) => {\r\n    const renderPlayer = (player) => {\r\n        if (player.colour !== '') {\r\n            return <h2 key={player._id.toString()} className={player.colour + ' highlighted'}>{player.nickName + (player._id === playerID ? ' (you)' : '')}</h2>\r\n        } else {\r\n            return <h2 key={player._id.toString()} className='highlighted'>{player.nickName + (player._id === playerID ? ' (you)' : '')}</h2>\r\n        }\r\n    }\r\n    return (\r\n        <div id=\"playerlist\">\r\n                <h1>Players: </h1>\r\n                {players.map(player => \r\n                    renderPlayer(player)\r\n                )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerList;","import socket from '../../socketConfig';\r\nimport { useState } from 'react';\r\nimport '../../css/StartButton.css';\r\n\r\nconst StartButton = ({ gameID }) => {\r\n    const [clicked, setClicked] = useState(false);\r\n    const startGame = () => {\r\n        setClicked(true);\r\n        socket.emit('start-game', { gameID });\r\n    };\r\n    if (clicked)\r\n        return null;\r\n    return (\r\n        <button id=\"start-button\" onClick={startGame}>Start Game</button>\r\n    );\r\n};\r\n\r\nexport default StartButton;","import StartButton from './StartButton';\r\n\r\nconst GameInfo = ({ game, player, gameOutcome }) => {\r\n    const oppositeColor = () => {\r\n        return player.colour === 'yellow' ? 'red' : 'yellow';\r\n    }\r\n    return (\r\n        <div id=\"info\">\r\n            {gameOutcome ? <h2>{gameOutcome}</h2> : null}\r\n            {game.hasStarted && (player.colour === game.turn ? <h2 className={player.colour + ' highlighted'}>Your turn</h2>\r\n                                                             : <h2 className={oppositeColor(player.colour) + ' highlighted'}>Opponent's turn</h2>)}\r\n            {!game.hasStarted && (game.players.length === 2 ? (player.isHosting ? <StartButton gameID={game._id.toString()}/> : <h2>Waiting for host to start...</h2>)\r\n                                                            : <h2>Waiting for another player...</h2>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameInfo;","const hasWon = (colour, board, width, height) => {\r\n    // check columns\r\n    for (let i = 0; i < width; i++) {\r\n        for (let j = 0; j <= height - 4; j++) {\r\n            if (board[i][j] === colour && board[i][j + 1] === colour && board[i][j + 2] === colour && board[i][j + 3] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    // check rows\r\n    for (let j = 0; j < height; j++) {\r\n        for (let i = 0; i <= width - 4; i++) {\r\n            if (board[i][j] === colour && board[i + 1][j] === colour && board[i + 2][j] === colour && board[i + 3][j] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    // diagonals\r\n    // right down\r\n    for (let i = 0; i <= width - 4; i++) {\r\n        for (let j = 0; j <= height - 4; j++) {\r\n            if (board[i][j] === colour && board[i + 1][j + 1] === colour && board[i + 2][j + 2] === colour && board[i + 3][j + 3] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    // left down\r\n    for (let i = 3; i < width; i++) {\r\n        for (let j = 0; j <= height - 4; j++) {\r\n            if (board[i][j] === colour && board[i - 1][j + 1] === colour && board[i - 2][j + 2] === colour && board[i - 3][j + 3] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default hasWon;","const isDraw = (board, width, height) => {\r\n    for (let i = 0; i < width; i++) {\r\n        for (let j = 0; j < height; j++) {\r\n            if (board[i][j] === '')\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport default isDraw;","import { useEffect, useState } from \"react\";\r\nimport '../../css/Board.css';\r\nimport socket from '../../socketConfig'\r\nimport hasWon from '../../hasWon';\r\nimport isDraw from '../../isDraw';\r\n\r\nconst randomMove = (board, width, height) => {\r\n    while (true) {\r\n        let row = height - 1;\r\n        const col = Math.floor(Math.random() * width);\r\n        while (row >= 0) {\r\n            if (board[col][row] === '') {\r\n                return { row, col };\r\n            }\r\n            row--;\r\n        }\r\n    }\r\n}\r\n\r\nconst Board = ({ game, setGame, playerColour, setGameOutcome, setTimer, setIsTimerPaused }) => {\r\n    const width = 7;\r\n    const height = 6;\r\n    const generateBoard = () => {\r\n        const matrix = new Array(width);\r\n        for (let i = 0; i < width; i++) {\r\n            matrix[i] = new Array(height).fill('');\r\n        }\r\n        return matrix;\r\n    };\r\n    const [board, setBoard] = useState(generateBoard());\r\n    useEffect(() => {\r\n        socket.on('restart', () => {\r\n            setGameOutcome(null);\r\n            setBoard(generateBoard());\r\n        });\r\n        socket.on('update-board', ({ row, col, colour }) => {\r\n            setBoard(board => {\r\n                board[col][row] = colour;\r\n                return board;\r\n            });\r\n        });\r\n        return () => {\r\n            socket.off('restart');\r\n            socket.off('update-board');\r\n        };\r\n    }, [setGameOutcome]);\r\n    useEffect(() => {\r\n        // for forced move due to time running out. In this this case, make a random move\r\n        socket.on('make-move', ({ turnID }) => {\r\n            if (!game.hasStarted || turnID !== game.turnID || game.turn !== playerColour) {\r\n                return;\r\n            }\r\n            const move = randomMove(board, width, height);\r\n            makeMove(move.row, move.col);\r\n        });\r\n        return () => socket.off('make-move');\r\n        // eslint-disable-next-line\r\n    }, [game, playerColour, board]);\r\n    const makeMove = (row, colIndex) => {\r\n        board[colIndex][row] = playerColour;\r\n        setBoard([...board]);\r\n        const gameID = game._id.toString();\r\n        socket.emit('update-board', { gameID, row, col: colIndex, colour: playerColour });\r\n        // turn over\r\n        if (hasWon(playerColour, board, width, height)) {\r\n            game.hasStarted = false;\r\n            setGameOutcome('You won!');\r\n            socket.emit('game-over', { gameID, result: 'You lost!' });\r\n        } else if (isDraw(board, width, height)) {\r\n            game.hasStarted = false;\r\n            setGameOutcome('Draw');\r\n            socket.emit('game-over', { gameID, result: 'Draw!' });\r\n        }\r\n        else {\r\n            game.turn = game.turn === 'red' ? 'yellow' : 'red';\r\n            socket.emit('change-turn', { gameID });\r\n            setTimer(game.turnTime);\r\n            setIsTimerPaused(true); // don't want to update the timer until we are sent back the time for the next turn\r\n        }\r\n        setGame({ ...game });\r\n    }\r\n    const handleClick = (colIndex) => {\r\n        if (!game.hasStarted || game.turn !== playerColour)\r\n            return;\r\n        let row = height - 1;\r\n        while (row >= 0) {\r\n            if (board[colIndex][row] === '') {\r\n                makeMove(row, colIndex);\r\n                return;\r\n            }\r\n            row--;\r\n        }\r\n    }\r\n    const renderCell = (cell, colIndex, rowIndex) => {\r\n        if (cell !== '') {\r\n            return <div className={'cell ' + cell} key={colIndex + ',' + rowIndex}></div>\r\n        } else {\r\n            return <div className='cell' key={colIndex + ',' + rowIndex}></div>\r\n        }\r\n    }\r\n    return (\r\n        <div id='board'>\r\n            {board.map((currentCol, colIndex) => \r\n                <div className='col' onClick={() => handleClick(colIndex)} key={colIndex}>\r\n                    {board[colIndex].map((cell, rowIndex) => \r\n                        renderCell(cell, colIndex, rowIndex)\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import { useEffect } from 'react';\r\n \r\nconst Timer = ({ timer, setTimer, isTimerPaused, startTime }) => {\r\n    useEffect(() => {\r\n        if (isTimerPaused) {\r\n            return;\r\n        }\r\n        const time = new Date().getTime();\r\n        const timeElapsed = (time - startTime) / 1000; // time elapsed since turn started in seconds\r\n        let intervalTime = 1000 * (1 - (timeElapsed - Math.floor(timeElapsed))); // time till next whole second decrease in time remaining\r\n        const interval = setTimeout(() => {\r\n            setTimer(timer => timer - 1);\r\n        }, intervalTime);\r\n        return () => clearTimeout(interval);\r\n    });\r\n    return ( \r\n        <h2>{timer < 0 ? 0 : timer}</h2>\r\n    );\r\n}\r\n \r\nexport default Timer;","import socket from '../../socketConfig';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport Messages from './Messages';\r\nimport PlayerList from './PlayerList'\r\nimport GameInfo from './GameInfo';\r\nimport Board from './Board';\r\nimport Timer from './Timer';\r\nimport '../../css/Game.css'\r\n\r\n// get the player object corresponding to the socket ID\r\nconst getPlayer = (players) => {\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (players[i].socketID === socket.id)\r\n            return players[i];\r\n    }\r\n    return { _id: '' };\r\n}\r\n\r\nconst Game = ({ game, setGame, players }) => {\r\n    const player = getPlayer(players);\r\n    const [gameOutcome, setGameOutcome] = useState(null);\r\n    const [timer, setTimer] = useState(null);\r\n    const [isTimerPaused, setIsTimerPaused] = useState(false);\r\n    useEffect(() => {\r\n        socket.on('game-over', result => setGameOutcome(result));\r\n        socket.on('update-timer', time => {\r\n            setTimer(time);\r\n            setIsTimerPaused(false);\r\n        });\r\n        return () => {\r\n            socket.off('game-over');\r\n            socket.off('update-timer');\r\n            if (player._id !== '') {\r\n                socket.emit('leave-game');\r\n            } \r\n        }\r\n    }, [player._id]);\r\n    if (player._id === '')\r\n        return <Redirect to=\"/\" />;\r\n    return (\r\n        <div id=\"game\">\r\n            <h2>Game Code: {game.joinID}</h2>\r\n            <GameInfo game={game} player={player} gameOutcome={gameOutcome} />\r\n            {game.hasStarted && <Timer timer={timer} setTimer={setTimer} isTimerPaused={isTimerPaused} startTime={game.turnStartTime} />}\r\n            <div id=\"main\">\r\n                <PlayerList playerID={player._id} players={players} />\r\n                <Board game={game} setGame={setGame} playerColour={player.colour} setGameOutcome={setGameOutcome} setTimer={setTimer} setIsTimerPaused={setIsTimerPaused}/>\r\n                <Messages gameID={game._id.toString()} nickName={player.nickName} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","import { useState } from 'react';\r\nimport '../../css/StartButton.css';\r\n\r\nconst randomNum = () => Math.floor(Math.random() * 2); // random num between 0 and 1\r\nconst oppositeColour = (colour) => colour === 'red' ? 'yellow' : 'red'; \r\n\r\nconst StartButton = ({ game, setGame, setYourColour, setAiColour, setGameOutcome }) => {\r\n    const [clicked, setClicked] = useState(false);\r\n    const start = () => {\r\n        const yourColour = randomNum() === 0 ? 'red' : 'yellow';\r\n        setYourColour(yourColour);\r\n        setAiColour(oppositeColour(yourColour));\r\n        game.hasStarted = true;\r\n        game.turn = randomNum() === 0 ? 'red' : 'yellow';\r\n        setGame({...game});\r\n        setGameOutcome(null);\r\n    }\r\n    const startGame = () => {\r\n        setClicked(true);\r\n        start();\r\n    };\r\n    if (clicked)\r\n        return null;\r\n    return (\r\n        <button id=\"start-button\" onClick={startGame}>Start Game</button>\r\n    );\r\n};\r\n\r\nexport default StartButton;","const generateBoard = (width, height) => {\r\n    const matrix = new Array(width);\r\n    for (let i = 0; i < width; i++) {\r\n        matrix[i] = new Array(height).fill('');\r\n    }\r\n    return matrix;\r\n};\r\n\r\nexport default generateBoard;","const possiblePositions = (board) => {\r\n    const positions = [];\r\n    for (let i = 0; i < board.length; i++) {\r\n        let row = board[i].length - 1;\r\n        while (row >= 0) {\r\n            if (board[i][row] === '') {\r\n                positions.push({ x: i, y: row });\r\n                break;\r\n            }\r\n            row--;\r\n        }\r\n    }\r\n    return positions;\r\n}\r\n\r\nexport default possiblePositions;","import hasWon from './hasWon';\r\nimport isDraw from './isDraw';\r\nimport possiblePositions from './possiblePositions';\r\n\r\nconst minimax = (board, depth, alpha, beta, maximizingPlayer, aiColour, humanColour, width, height) => {\r\n    if (hasWon(aiColour, board, width, height)) {\r\n        return 1000 + depth;\r\n    } else if (hasWon(humanColour, board, width, height)) {\r\n        return -1000 - depth;\r\n    } else if (isDraw(board, width, height)) {\r\n        return 0;\r\n    } else if (depth === 0) {\r\n        // randomness\r\n        return Math.floor(Math.random() * 200) - 100;\r\n    }\r\n    const positions = possiblePositions(board);\r\n    if (maximizingPlayer) {\r\n        let max = -Infinity;\r\n        for (let i = 0; i < positions.length; i++) {\r\n            board[positions[i].x][positions[i].y] = aiColour;\r\n            const value = minimax(board, depth - 1, alpha, beta, false, aiColour, humanColour, width, height);\r\n            max = Math.max(max, value);\r\n            alpha = Math.max(alpha, value);\r\n            // undo the move\r\n            board[positions[i].x][positions[i].y] = '';\r\n            if (alpha >= beta) break;\r\n        }\r\n        return max;\r\n    } else {\r\n        let min = Infinity;\r\n        for (let i = 0; i < positions.length; i++) {\r\n            board[positions[i].x][positions[i].y] = humanColour;\r\n            const value = minimax(board, depth - 1, alpha, beta, true, aiColour, humanColour, width, height);\r\n            min = Math.min(min, value);\r\n            beta = Math.min(beta, value);\r\n            // undo the move\r\n            board[positions[i].x][positions[i].y] = '';\r\n            if (beta <= alpha) break;\r\n        }\r\n        return min;\r\n    }\r\n}\r\n\r\nexport default minimax;","import { useState, useEffect } from \"react\";\r\nimport '../../css/Board.css';\r\nimport hasWon from '../../hasWon';\r\nimport isDraw from '../../isDraw';\r\nimport generateBoard from '../../generateBoard';\r\nimport possiblePositions from '../../possiblePositions';\r\nimport minimax from '../../minimax';\r\n\r\nconst Board = ({ depth, game, setGame, playerColour, aiColour, setGameOutcome }) => {\r\n    const width = 7;\r\n    const height = 6;\r\n    const [board, setBoard] = useState(generateBoard(width, height));\r\n    const aiMove = () => {\r\n        let max = -Infinity;\r\n        let bestMove;\r\n        let alpha = -Infinity, beta = Infinity;\r\n        const positions = possiblePositions(board);\r\n        for (let i = 0; i < positions.length; i++) {\r\n            board[positions[i].x][positions[i].y] = aiColour;\r\n            const value = minimax(board, depth - 1, alpha, beta, false, aiColour, playerColour, width, height);\r\n            if (value > max) {\r\n                max = value;\r\n                bestMove = positions[i];\r\n            }\r\n            alpha = Math.max(alpha, value);\r\n            // undo the move\r\n            board[positions[i].x][positions[i].y] = '';\r\n        }\r\n        makeMove(aiColour, bestMove.y, bestMove.x);\r\n    }\r\n    useEffect(() => {\r\n        if (game.hasStarted) {\r\n            setBoard(generateBoard(width, height));\r\n        }\r\n    }, [game.hasStarted]);\r\n    useEffect(() => {\r\n        if (game.hasStarted && game.turn === aiColour) {\r\n            aiMove();\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [board]);\r\n    const makeMove = async (colour, row, colIndex) => {\r\n        board[colIndex][row] = colour;\r\n        setBoard([...board]);\r\n        // turn over\r\n        if (hasWon(colour, board, width, height)) {\r\n            game.hasStarted = false;\r\n            if (colour === playerColour) {\r\n                setGameOutcome('You won!');\r\n            } else {\r\n                setGameOutcome('You lost!');\r\n            }\r\n        } else if (isDraw(board, width, height)) {\r\n            game.hasStarted = false;\r\n            setGameOutcome('Draw');\r\n        }\r\n        else {\r\n            game.turn = game.turn === 'red' ? 'yellow' : 'red';\r\n        }\r\n        setGame({ ...game });\r\n    }\r\n    const handleClick = (colIndex) => {\r\n        if (!game.hasStarted || game.turn !== playerColour)\r\n            return;\r\n        let row = height - 1;\r\n        while (row >= 0) {\r\n            if (board[colIndex][row] === '') {\r\n                makeMove(playerColour, row, colIndex);\r\n                return;\r\n            }\r\n            row--;\r\n        }\r\n    }\r\n    const renderCell = (cell, colIndex, rowIndex) => {\r\n        if (cell !== '') {\r\n            return <div className={'cell ' + cell} key={colIndex + ',' + rowIndex}></div>\r\n        } else {\r\n            return <div className='cell' key={colIndex + ',' + rowIndex}></div>\r\n        }\r\n    }\r\n    return (\r\n        <div id='board'>\r\n            {board.map((currentCol, colIndex) => \r\n                <div className='col' onClick={() => handleClick(colIndex)} key={colIndex}>\r\n                    {board[colIndex].map((cell, rowIndex) => \r\n                        renderCell(cell, colIndex, rowIndex)\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import { useState } from 'react';\r\nimport StartButton from './StartButton';\r\nimport Board from './Board';\r\nimport '../../css/SingleplayerGame.css';\r\n\r\nconst SinglePlayer = ({ difficulty, setDifficulty }) => {\r\n    const [game, setGame] = useState({ hasStarted: false });\r\n    const [yourColour, setYourColour] = useState(null);\r\n    const [aiColour, setAiColour] = useState(null);\r\n    const [gameOutcome, setGameOutcome] = useState(null);\r\n    return (\r\n        <div id=\"singleplayer\">\r\n            <h2>{difficulty.string}</h2>\r\n            {gameOutcome && <h2>{gameOutcome}</h2>}\r\n            {!game.hasStarted && <StartButton game={game} setGame={setGame} setYourColour={setYourColour} setAiColour={setAiColour} setGameOutcome={setGameOutcome} />}\r\n            {game.hasStarted && (game.turn === yourColour ? <h2 className={yourColour + ' highlighted'}>Your turn!</h2>\r\n                                                          : <h2 className={aiColour + ' highlighted'}>AI's turn!</h2>)}\r\n            <Board depth={difficulty.depth} game={game} setGame={setGame} playerColour={yourColour} aiColour={aiColour} setGameOutcome={setGameOutcome} />\r\n            <button id=\"back\" onClick={() => setDifficulty(null)}>Change difficulty</button>\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default SinglePlayer;","import { useState } from 'react';\r\nimport Game from './Game';\r\nimport '../../css/GameMenu.css';\r\n\r\nconst DifficultySelect = () => {\r\n    const [difficulty, setDifficulty] = useState(null);\r\n    if (difficulty === null) {\r\n        return (\r\n            <div id=\"menu\">\r\n                <h1>Select Difficulty</h1>\r\n                <button onClick={() => setDifficulty({ depth: 2, string: 'Easy' })}>Easy</button>\r\n                <button onClick={() => setDifficulty({ depth: 4, string: 'Medium' })}>Medium</button>\r\n                <button onClick={() => setDifficulty({ depth: 7, string: 'Hard' })}>Hard</button>\r\n            </div> \r\n        );\r\n    }\r\n    return <Game difficulty={difficulty} setDifficulty={setDifficulty}/>;\r\n}\r\n\r\nexport default DifficultySelect;","import { useHistory, useLocation } from 'react-router-dom';\r\n\r\nconst BackButton = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    if (location.pathname === '/')\r\n        return null;\r\n    return <button id=\"link\" onClick={() => history.replace('/')}>Back to main menu...</button>;\r\n}\r\n \r\nexport default BackButton;","import { Route, Switch, useHistory } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport GameMenu from './components/GameMenu';\nimport CreateGame from './components/multiplayer/CreateGame';\nimport JoinGame from './components/multiplayer/JoinGame';\nimport MultiplayerGame from './components/multiplayer/Game';\nimport DifficultySelect from './components/singleplayer/DifficultySelect';\nimport BackButton from './components/BackButton';\nimport socket from './socketConfig';\nimport './css/App.css'\n\nfunction App() {\n    const history = useHistory();\n    const [game, setGame] = useState({});\n    const [players, setPlayers] = useState([]);\n    useEffect(() => {\n        socket.on('update-game', game => setGame(game));\n        socket.on('update-players', players => setPlayers(players));\n        socket.on('update-game-and-players', ({ game, players }) => {\n            setGame(game);\n            setPlayers(players);\n        });\n        socket.on('join-game', () => history.replace('/game/play'));\n    }, [history]);\n    return (\n        <div>\n            <BackButton />\n            <Switch>\n                <Route exact path=\"/\" component={GameMenu} />\n                <Route exact path=\"/game/ai\" component={DifficultySelect} />\n                <Route exact path=\"/game/create\" component={CreateGame} />\n                <Route exact path=\"/game/join\" component={JoinGame} />\n                <Route exact path=\"/game/play\">\n                    <MultiplayerGame game={game} setGame={setGame} players={players} setPlayers={setPlayers}/>\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}
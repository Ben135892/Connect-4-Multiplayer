{"version":3,"sources":["components/GameMenu.js","socketConfig.js","components/multiplayer/CreateGame.js","components/multiplayer/JoinGame.js","components/multiplayer/Messages.js","components/multiplayer/PlayerList.js","components/multiplayer/StartButton.js","components/multiplayer/GameInfo.js","hasWon.js","isDraw.js","randomMove.js","components/multiplayer/Board.js","components/multiplayer/Timer.js","components/multiplayer/Game.js","components/singleplayer/StartButton.js","generateBoard.js","possiblePositions.js","minimax.js","components/singleplayer/Board.js","components/singleplayer/Game.js","components/singleplayer/DifficultySelect.js","components/BackButton.js","App.js","index.js"],"names":["GameMenu","history","id","onClick","replace","socket","io","CreateGame","useState","nickName","setNickName","clicked","setClicked","className","onSubmit","e","preventDefault","emit","htmlFor","autoComplete","onChange","target","value","type","JoinGame","joinID","setJoinID","error","setError","useEffect","on","errorMessage","off","class","Messages","gameID","input","setInput","messages","setMessages","messagesEndRef","useRef","msg","concat","current","scrollIntoView","behavior","message","map","index","ref","PlayerList","playerID","players","player","colour","_id","toString","StartButton","GameInfo","game","gameOutcome","hasStarted","turn","length","isHosting","hasWon","board","width","height","i","j","isDraw","randomMove","row","col","Math","floor","random","Board","setGame","playerColour","setGameOutcome","generateBoard","matrix","Array","fill","setBoard","turnID","move","makeMove","colIndex","result","currentCol","handleClick","cell","Timer","turnTime","timer","setTimer","interval","setInterval","clearInterval","Game","setPlayers","socketID","getPlayer","to","randomNum","setYourColour","setAiColour","yourColour","start","possiblePositions","positions","push","x","y","minimax","depth","alpha","beta","maximizingPlayer","aiColour","humanColour","max","Infinity","min","bestMove","aiMove","a","rowIndex","renderCell","SinglePlayer","difficulty","setDifficulty","string","DifficultySelect","BackButton","location","useLocation","useHistory","pathname","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a67f14cf.chunk.js","sourcesContent":["import '../css/GameMenu.css';\r\n\r\nconst GameMenu = ({ history }) => {\r\n    return (\r\n        <div id=\"menu\">\r\n            <h1>Connect 4 Online</h1>\r\n            <button onClick={() => history.replace('/game/ai')}>Play against AI</button>\r\n            <button onClick={() => history.replace('/game/create')}>Create Game</button>\r\n            <button onClick={() => history.replace('/game/join')}>Join Game</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameMenu;","import io from 'socket.io-client';\r\n//const socket = io('/'); for deploymnet, io('http://localhost:3001') for local testing\r\nconst socket = io('/');\r\nexport default socket;","import { useState } from 'react';\r\nimport socket from '../../socketConfig';\r\nimport '../../css/Form.css'\r\n\r\nconst CreateGame = () => {\r\n    const [nickName, setNickName] = useState('');\r\n    const [clicked, setClicked] = useState(false);\r\n    const onChange = e => {\r\n        setNickName(e.target.value);\r\n    }  \r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        setClicked(true);\r\n        socket.emit('create-game', { nickName });\r\n    }\r\n    if (clicked)\r\n        return null;\r\n    return ( \r\n        <div className=\"form\">\r\n            <h1>Create Game</h1>\r\n            <form onSubmit={onSubmit}>\r\n                <label htmlFor=\"nickName\">Enter Nick Name</label>\r\n                <input autoComplete=\"off\" onChange={onChange} type=\"text\" id=\"nickName\" />\r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CreateGame;","import { useState, useEffect } from 'react';\r\nimport socket from '../../socketConfig';\r\nimport '../../css/Form.css'\r\n\r\nconst JoinGame = () => {\r\n    const [nickName, setNickName] = useState('');\r\n    const [joinID, setJoinID] = useState('');\r\n    const [error, setError] = useState(false);\r\n    const [clicked, setClicked] = useState(false);\r\n    useEffect(() => {\r\n        socket.on('error', errorMessage => {\r\n            setError(errorMessage);\r\n            setClicked(false);\r\n        });\r\n        return () => socket.off('error');\r\n    }, []);\r\n    const onNameChange = e => {\r\n        setNickName(e.target.value);\r\n    }  \r\n    const onIDChange = e => {\r\n        setJoinID(e.target.value);\r\n    }\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        setClicked(true);\r\n        socket.emit('join-game', { nickName, joinID });\r\n    }\r\n    if (clicked)\r\n        return null;\r\n    return ( \r\n        <div className=\"form\">\r\n            <h1>Join Game</h1>\r\n            <form onSubmit={onSubmit}>\r\n                {error && <div class=\"error\">{error}</div>}\r\n                <label htmlFor=\"nickName\">Enter Nick Name</label>\r\n                <input autoComplete=\"off\" value={nickName} onChange={onNameChange} type=\"text\" id=\"nickName\" />\r\n                <label htmlFor=\"gameID\">Enter Room ID</label>\r\n                <input autoComplete=\"off\" value={joinID} onChange={onIDChange} type=\"text\" id=\"gameID\" />\r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JoinGame;","import { useState, useEffect, useRef } from 'react';\r\nimport socket from '../../socketConfig';\r\nimport '../../css/Messages.css';\r\n\r\nconst Messages = ({ gameID, nickName }) => {\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const messagesEndRef = useRef(null);\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n    useEffect(() => {\r\n        socket.on('message', msg => {\r\n            setMessages(messages => messages.concat([ msg ]));\r\n        });\r\n        return () => socket.off('message');\r\n    }, []);\r\n    useEffect(scrollToBottom,\r\n        [messages]\r\n    );\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (input === '')\r\n            return;\r\n        const message = nickName + ': ' + input;\r\n        setMessages(messages => messages.concat([ message ]));\r\n        setInput('');\r\n        socket.emit('message', { gameID, message });\r\n    }\r\n    return (\r\n        <div id=\"message-div\">\r\n            <form onSubmit={onSubmit}>\r\n                <label htmlFor=\"message\">Send Message: </label>\r\n                <br></br>\r\n                <input autoComplete=\"off\" type=\"text\" id=\"message\" value={input} onChange={(e) => setInput(e.target.value)} />\r\n                <button>Send</button>\r\n            </form>\r\n            <div id=\"messages\">\r\n                {messages.map((message, index) => \r\n                    <p key={index}>{message}</p>\r\n                )}\r\n                <div ref={messagesEndRef} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Messages;","import '../../css/PlayerList.css';\r\n\r\nconst PlayerList = ({ playerID, players }) => {\r\n    return (\r\n        <div id=\"playerlist\">\r\n                <h1>Players: </h1>\r\n                {players.map(player => \r\n                    <h2 key={player._id.toString()} className={'highlighted ' + player.colour}>\r\n                        {player.nickName + (player._id.toString() === playerID.toString() ? ' (you)' : '')}\r\n                    </h2>\r\n                )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerList;","import socket from '../../socketConfig';\r\nimport { useState } from 'react';\r\nimport '../../css/StartButton.css';\r\n\r\nconst StartButton = ({ gameID }) => {\r\n    const [clicked, setClicked] = useState(false);\r\n    const startGame = () => {\r\n        setClicked(true);\r\n        socket.emit('start-game', { gameID });\r\n    };\r\n    if (clicked)\r\n        return null;\r\n    return (\r\n        <button id=\"start-button\" onClick={startGame}>Start Game</button>\r\n    );\r\n};\r\n\r\nexport default StartButton;","import StartButton from './StartButton';\r\n\r\nconst GameInfo = ({ game, player, gameOutcome }) => {\r\n    const oppositeColor = () => player.colour === 'yellow' ? 'red' : 'yellow';\r\n    return (\r\n        <div id=\"info\">\r\n            {gameOutcome ? <h2>{gameOutcome}</h2> : null}\r\n            {game.hasStarted && (player.colour === game.turn ? <h2 className={player.colour + ' highlighted'}>Your turn</h2>\r\n                                                             : <h2 className={oppositeColor(player.colour) + ' highlighted'}>Opponent's turn</h2>)}\r\n            {!game.hasStarted && (game.players.length === 2 ? (player.isHosting ? <StartButton gameID={game._id}/> : <h2>Waiting for host to start...</h2>)\r\n                                                            : <h2>Waiting for another player...</h2>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameInfo;","const hasWon = (colour, board, width, height) => {\r\n    // check columns\r\n    for (let i = 0; i < width; i++) {\r\n        for (let j = 0; j <= height - 4; j++) {\r\n            if (board[i][j] === colour && board[i][j + 1] === colour && board[i][j + 2] === colour && board[i][j + 3] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    // check rows\r\n    for (let j = 0; j < height; j++) {\r\n        for (let i = 0; i <= width - 4; i++) {\r\n            if (board[i][j] === colour && board[i + 1][j] === colour && board[i + 2][j] === colour && board[i + 3][j] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    // diagonals\r\n    // right down\r\n    for (let i = 0; i <= width - 4; i++) {\r\n        for (let j = 0; j <= height - 4; j++) {\r\n            if (board[i][j] === colour && board[i + 1][j + 1] === colour && board[i + 2][j + 2] === colour && board[i + 3][j + 3] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    // left down\r\n    for (let i = 3; i < width; i++) {\r\n        for (let j = 0; j <= height - 4; j++) {\r\n            if (board[i][j] === colour && board[i - 1][j + 1] === colour && board[i - 2][j + 2] === colour && board[i - 3][j + 3] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default hasWon;","const isDraw = (board, width, height) => {\r\n    for (let i = 0; i < width; i++) {\r\n        for (let j = 0; j < height; j++) {\r\n            if (board[i][j] === '')\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport default isDraw;","const randomMove = (board, width, height) => {\r\n    while (true) {\r\n        let row = height - 1;\r\n        const col = Math.floor(Math.random() * width);\r\n        while (row >= 0) {\r\n            if (board[col][row] === '') {\r\n                return { row, col };\r\n            }\r\n            row--;\r\n        }\r\n    }\r\n}\r\n\r\nexport default randomMove;","import { useEffect, useState } from \"react\";\r\nimport '../../css/Board.css';\r\nimport socket from '../../socketConfig'\r\nimport hasWon from '../../hasWon';\r\nimport isDraw from '../../isDraw';\r\nimport randomMove from '../../randomMove';\r\n\r\nconst Board = ({ game, setGame, playerColour, setGameOutcome }) => {\r\n    const width = 7;\r\n    const height = 6;\r\n    const generateBoard = () => {\r\n        const matrix = new Array(width);\r\n        for (let i = 0; i < width; i++) {\r\n            matrix[i] = new Array(height).fill('');\r\n        }\r\n        return matrix;\r\n    };\r\n    const [board, setBoard] = useState(generateBoard());\r\n    useEffect(() => {\r\n        socket.on('restart', () => {\r\n            setGameOutcome(null);\r\n            setBoard(generateBoard());\r\n        });\r\n        socket.on('update-board', ({ row, col, colour }) => {\r\n            setBoard(board => {\r\n                board[col][row] = colour;\r\n                return board;\r\n            });\r\n        });\r\n        return () => {\r\n            socket.off('restart');\r\n            socket.off('update-board');\r\n        };\r\n    }, [setGameOutcome]);\r\n    useEffect(() => {\r\n        // for forced move due to time running out. In this this case, make a random move\r\n        socket.on('make-move', ({ turnID }) => {\r\n            if (!game.hasStarted || turnID !== game.turnID || game.turn !== playerColour) {\r\n                return;\r\n            }\r\n            const move = randomMove(board, width, height);\r\n            makeMove(move.row, move.col);\r\n        });\r\n        return () => socket.off('make-move');\r\n    });\r\n    const makeMove = (row, colIndex) => {\r\n        board[colIndex][row] = playerColour;\r\n        setBoard([...board]);\r\n        socket.emit('update-board', { gameID: game._id, row, col: colIndex, colour: playerColour });\r\n        // turn over\r\n        if (hasWon(playerColour, board, width, height)) {\r\n            game.hasStarted = false;\r\n            setGameOutcome('You won!');\r\n            socket.emit('game-over', { gameID: game._id, result: 'You lost!' });\r\n        } else if (isDraw(board, width, height)) {\r\n            game.hasStarted = false;\r\n            setGameOutcome('Draw');\r\n            socket.emit('game-over', { gameID: game._id, result: 'Draw!' });\r\n        }\r\n        else {\r\n            game.turn = game.turn === 'red' ? 'yellow' : 'red';\r\n            socket.emit('change-turn', { gameID: game._id });\r\n        }\r\n        setGame({ ...game });\r\n    }\r\n    const handleClick = (col) => {\r\n        if (!game.hasStarted || game.turn !== playerColour)\r\n            return;\r\n        let row = height - 1;\r\n        while (row >= 0) {\r\n            if (board[col][row] === '') {\r\n                makeMove(row, col);\r\n                return;\r\n            }\r\n            row--;\r\n        }\r\n    }\r\n    return (\r\n        <div id='board'>\r\n            {board.map((currentCol, col) => \r\n                <div className='col' onClick={() => handleClick(col)} key={col}>\r\n                    {board[col].map((cell, row) => \r\n                        <div className={'cell ' + cell} key={col + ',' + row}></div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import { useState, useEffect } from 'react';\r\n \r\nconst Timer = ({ game }) => {\r\n    const [timer, setTimer] = useState(game.turnTime);\r\n    useEffect(() => {\r\n        setTimer(game.turnTime);\r\n        const interval = setInterval(() => {\r\n            setTimer(timer => timer - 1);\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, [game.turnID, game.turn, game.turnTime, setTimer]);\r\n    return ( \r\n        <h2>{timer}</h2>\r\n    );\r\n}\r\n \r\nexport default Timer;","import socket from '../../socketConfig';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport Messages from './Messages';\r\nimport PlayerList from './PlayerList'\r\nimport GameInfo from './GameInfo';\r\nimport Board from './Board';\r\nimport Timer from './Timer';\r\nimport '../../css/Game.css'\r\n\r\n// get the player object corresponding to the socket ID\r\nconst getPlayer = (players) => {\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (players[i].socketID === socket.id)\r\n            return players[i];\r\n    }\r\n    return { _id: '' };\r\n}\r\n\r\nconst Game = ({ game, setGame, players, setPlayers }) => {\r\n    const player = getPlayer(players);\r\n    const [gameOutcome, setGameOutcome] = useState(null);\r\n    useEffect(() => {\r\n        socket.on('game-over', result => setGameOutcome(result));\r\n        return () => {\r\n            socket.off('game-over');\r\n            socket.off('update-timer');\r\n            if (player._id !== '') {\r\n                socket.emit('leave-game');\r\n                setGame({});\r\n                setPlayers([]);\r\n            } \r\n        }\r\n    }, [player._id, setGame, setPlayers]);\r\n    if (player._id === '')\r\n        return <Redirect to=\"/\" />;\r\n    return (\r\n        <div id=\"game\">\r\n            <h2>Game Code: {game.joinID}</h2>\r\n            <GameInfo game={game} player={player} gameOutcome={gameOutcome} />\r\n            {game.hasStarted && <Timer game={game} />}\r\n            <div id=\"main\">\r\n                <PlayerList playerID={player._id} players={players} />\r\n                <Board game={game} setGame={setGame} playerColour={player.colour} setGameOutcome={setGameOutcome} />\r\n                <Messages gameID={game._id} nickName={player.nickName} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","import { useState } from 'react';\r\nimport '../../css/StartButton.css';\r\n\r\nconst randomNum = () => Math.floor(Math.random() * 2); // random num between 0 and 1\r\nconst oppositeColour = (colour) => colour === 'red' ? 'yellow' : 'red'; \r\n\r\nconst StartButton = ({ game, setGame, setYourColour, setAiColour, setGameOutcome }) => {\r\n    const [clicked, setClicked] = useState(false);\r\n    const start = () => {\r\n        const yourColour = randomNum() === 0 ? 'red' : 'yellow';\r\n        setYourColour(yourColour);\r\n        setAiColour(oppositeColour(yourColour));\r\n        game.hasStarted = true;\r\n        game.turn = randomNum() === 0 ? 'red' : 'yellow';\r\n        setGame({...game});\r\n        setGameOutcome(null);\r\n    }\r\n    const startGame = () => {\r\n        setClicked(true);\r\n        start();\r\n    };\r\n    if (clicked)\r\n        return null;\r\n    return (\r\n        <button id=\"start-button\" onClick={startGame}>Start Game</button>\r\n    );\r\n};\r\n\r\nexport default StartButton;","const generateBoard = (width, height) => {\r\n    const matrix = new Array(width);\r\n    for (let i = 0; i < width; i++) {\r\n        matrix[i] = new Array(height).fill('');\r\n    }\r\n    return matrix;\r\n};\r\n\r\nexport default generateBoard;","const possiblePositions = (board) => {\r\n    const positions = [];\r\n    for (let i = 0; i < board.length; i++) {\r\n        let row = board[i].length - 1;\r\n        while (row >= 0) {\r\n            if (board[i][row] === '') {\r\n                positions.push({ x: i, y: row });\r\n                break;\r\n            }\r\n            row--;\r\n        }\r\n    }\r\n    return positions;\r\n}\r\n\r\nexport default possiblePositions;","import hasWon from './hasWon';\r\nimport isDraw from './isDraw';\r\nimport possiblePositions from './possiblePositions';\r\n\r\nconst minimax = (board, depth, alpha, beta, maximizingPlayer, aiColour, humanColour, width, height) => {\r\n    if (hasWon(aiColour, board, width, height)) {\r\n        return 1000 + depth;\r\n    } else if (hasWon(humanColour, board, width, height)) {\r\n        return -1000 - depth;\r\n    } else if (isDraw(board, width, height)) {\r\n        return 0;\r\n    } else if (depth === 0) {\r\n        // randomness\r\n        return Math.floor(Math.random() * 200) - 100;\r\n    }\r\n    const positions = possiblePositions(board);\r\n    if (maximizingPlayer) {\r\n        let max = -Infinity;\r\n        for (let i = 0; i < positions.length; i++) {\r\n            board[positions[i].x][positions[i].y] = aiColour;\r\n            const value = minimax(board, depth - 1, alpha, beta, false, aiColour, humanColour, width, height);\r\n            max = Math.max(max, value);\r\n            alpha = Math.max(alpha, value);\r\n            // undo the move\r\n            board[positions[i].x][positions[i].y] = '';\r\n            if (alpha >= beta) break;\r\n        }\r\n        return max;\r\n    } else {\r\n        let min = Infinity;\r\n        for (let i = 0; i < positions.length; i++) {\r\n            board[positions[i].x][positions[i].y] = humanColour;\r\n            const value = minimax(board, depth - 1, alpha, beta, true, aiColour, humanColour, width, height);\r\n            min = Math.min(min, value);\r\n            beta = Math.min(beta, value);\r\n            // undo the move\r\n            board[positions[i].x][positions[i].y] = '';\r\n            if (beta <= alpha) break;\r\n        }\r\n        return min;\r\n    }\r\n}\r\n\r\nexport default minimax;","import { useState, useEffect } from \"react\";\r\nimport '../../css/Board.css';\r\nimport hasWon from '../../hasWon';\r\nimport isDraw from '../../isDraw';\r\nimport generateBoard from '../../generateBoard';\r\nimport possiblePositions from '../../possiblePositions';\r\nimport minimax from '../../minimax';\r\n\r\nconst Board = ({ depth, game, setGame, playerColour, aiColour, setGameOutcome }) => {\r\n    const width = 7;\r\n    const height = 6;\r\n    const [board, setBoard] = useState(generateBoard(width, height));\r\n    const aiMove = () => {\r\n        let max = -Infinity;\r\n        let bestMove;\r\n        let alpha = -Infinity, beta = Infinity;\r\n        const positions = possiblePositions(board);\r\n        for (let i = 0; i < positions.length; i++) {\r\n            board[positions[i].x][positions[i].y] = aiColour;\r\n            const value = minimax(board, depth - 1, alpha, beta, false, aiColour, playerColour, width, height);\r\n            if (value > max) {\r\n                max = value;\r\n                bestMove = positions[i];\r\n            }\r\n            alpha = Math.max(alpha, value);\r\n            // undo the move\r\n            board[positions[i].x][positions[i].y] = '';\r\n        }\r\n        makeMove(aiColour, bestMove.y, bestMove.x);\r\n    }\r\n    useEffect(() => {\r\n        if (game.hasStarted) {\r\n            setBoard(generateBoard(width, height));\r\n        }\r\n    }, [game.hasStarted]);\r\n    useEffect(() => {\r\n        if (game.hasStarted && game.turn === aiColour) {\r\n            aiMove();\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [board]);\r\n    const makeMove = async (colour, row, colIndex) => {\r\n        board[colIndex][row] = colour;\r\n        setBoard([...board]);\r\n        // turn over\r\n        if (hasWon(colour, board, width, height)) {\r\n            game.hasStarted = false;\r\n            if (colour === playerColour) {\r\n                setGameOutcome('You won!');\r\n            } else {\r\n                setGameOutcome('You lost!');\r\n            }\r\n        } else if (isDraw(board, width, height)) {\r\n            game.hasStarted = false;\r\n            setGameOutcome('Draw');\r\n        }\r\n        else {\r\n            game.turn = game.turn === 'red' ? 'yellow' : 'red';\r\n        }\r\n        setGame({ ...game });\r\n    }\r\n    const handleClick = (colIndex) => {\r\n        if (!game.hasStarted || game.turn !== playerColour)\r\n            return;\r\n        let row = height - 1;\r\n        while (row >= 0) {\r\n            if (board[colIndex][row] === '') {\r\n                makeMove(playerColour, row, colIndex);\r\n                return;\r\n            }\r\n            row--;\r\n        }\r\n    }\r\n    const renderCell = (cell, colIndex, rowIndex) => {\r\n        if (cell !== '') {\r\n            return <div className={'cell ' + cell} key={colIndex + ',' + rowIndex}></div>\r\n        } else {\r\n            return <div className='cell' key={colIndex + ',' + rowIndex}></div>\r\n        }\r\n    }\r\n    return (\r\n        <div id='board'>\r\n            {board.map((currentCol, colIndex) => \r\n                <div className='col' onClick={() => handleClick(colIndex)} key={colIndex}>\r\n                    {board[colIndex].map((cell, rowIndex) => \r\n                        renderCell(cell, colIndex, rowIndex)\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import { useState } from 'react';\r\nimport StartButton from './StartButton';\r\nimport Board from './Board';\r\nimport '../../css/SingleplayerGame.css';\r\n\r\nconst SinglePlayer = ({ difficulty, setDifficulty }) => {\r\n    const [game, setGame] = useState({ hasStarted: false });\r\n    const [yourColour, setYourColour] = useState(null);\r\n    const [aiColour, setAiColour] = useState(null);\r\n    const [gameOutcome, setGameOutcome] = useState(null);\r\n    return (\r\n        <div id=\"singleplayer\">\r\n            <h2>{difficulty.string}</h2>\r\n            {gameOutcome && <h2>{gameOutcome}</h2>}\r\n            {!game.hasStarted && <StartButton game={game} setGame={setGame} setYourColour={setYourColour} setAiColour={setAiColour} setGameOutcome={setGameOutcome} />}\r\n            {game.hasStarted && (game.turn === yourColour ? <h2 className={yourColour + ' highlighted'}>Your turn!</h2>\r\n                                                          : <h2 className={aiColour + ' highlighted'}>AI's turn!</h2>)}\r\n            <Board depth={difficulty.depth} game={game} setGame={setGame} playerColour={yourColour} aiColour={aiColour} setGameOutcome={setGameOutcome} />\r\n            <button id=\"back\" onClick={() => setDifficulty(null)}>Change difficulty</button>\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default SinglePlayer;","import { useState } from 'react';\r\nimport Game from './Game';\r\nimport '../../css/GameMenu.css';\r\n\r\nconst DifficultySelect = () => {\r\n    const [difficulty, setDifficulty] = useState(null);\r\n    if (difficulty === null) {\r\n        return (\r\n            <div id=\"menu\">\r\n                <h1>Select Difficulty</h1>\r\n                <button onClick={() => setDifficulty({ depth: 2, string: 'Easy' })}>Easy</button>\r\n                <button onClick={() => setDifficulty({ depth: 4, string: 'Medium' })}>Medium</button>\r\n                <button onClick={() => setDifficulty({ depth: 7, string: 'Hard' })}>Hard</button>\r\n            </div> \r\n        );\r\n    }\r\n    return <Game difficulty={difficulty} setDifficulty={setDifficulty}/>;\r\n}\r\n\r\nexport default DifficultySelect;","import { useHistory, useLocation } from 'react-router-dom';\r\n\r\nconst BackButton = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    if (location.pathname === '/')\r\n        return null;\r\n    return <button id=\"link\" onClick={() => history.replace('/')}>Back to main menu...</button>;\r\n}\r\n \r\nexport default BackButton;","import { Route, Switch, useHistory } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport GameMenu from './components/GameMenu';\nimport CreateGame from './components/multiplayer/CreateGame';\nimport JoinGame from './components/multiplayer/JoinGame';\nimport MultiplayerGame from './components/multiplayer/Game';\nimport DifficultySelect from './components/singleplayer/DifficultySelect';\nimport BackButton from './components/BackButton';\nimport socket from './socketConfig';\nimport './css/App.css';\n\nfunction App() {\n    const history = useHistory();\n    const [game, setGame] = useState({});\n    const [players, setPlayers] = useState([]);\n    useEffect(() => {\n        socket.on('update-game', game => setGame(game));\n        socket.on('update-players', players => setPlayers(players));\n        socket.on('update-game-and-players', ({ game, players }) => {\n            setGame(game);\n            setPlayers(players);\n        });\n        socket.on('join-game', () => history.replace('/game/play'));\n    }, [history]);\n    return (\n        <div>\n            <BackButton />\n            <Switch>\n                <Route exact path=\"/\" component={GameMenu} />\n                <Route exact path=\"/game/ai\" component={DifficultySelect} />\n                <Route exact path=\"/game/create\" component={CreateGame} />\n                <Route exact path=\"/game/join\" component={JoinGame} />\n                <Route exact path=\"/game/play\">\n                    <MultiplayerGame game={game} setGame={setGame} players={players} setPlayers={setPlayers}/>\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["GameMenu.js","multiplayer/socketConfig.js","multiplayer/CreateGame.js","multiplayer/JoinGame.js","multiplayer/Messages.js","multiplayer/PlayerList.js","multiplayer/StartButton.js","multiplayer/GameInfo.js","hasWon.js","isDraw.js","multiplayer/Board.js","multiplayer/Timer.js","multiplayer/Game.js","singleplayer/StartButton.js","generateBoard.js","singleplayer/possiblePositions.js","singleplayer/minimax.js","singleplayer/Board.js","singleplayer/Game.js","singleplayer/DifficultySelect.js","BackButton.js","App.js","index.js"],"names":["GameMenu","history","id","onClick","replace","socket","io","CreateGame","useState","nickName","setNickName","clicked","setClicked","className","onSubmit","e","preventDefault","emit","htmlFor","autoComplete","onChange","target","value","type","JoinGame","gameID","setGameID","error","setError","useEffect","on","errorMessage","off","class","Messages","messagesEndRef","useRef","input","setInput","messages","setMessages","msg","concat","current","scrollIntoView","behavior","message","map","index","ref","PlayerList","playerID","players","player","colour","_id","toString","renderPlayer","StartButton","GameInfo","game","gameOutcome","hasStarted","turn","length","isHosting","hasWon","board","width","height","i","j","isDraw","Board","setGame","setGameOutcome","timer","setTimer","generateBoard","matrix","Array","fill","setBoard","row","col","column","Math","floor","random","makeMove","colIndex","result","turnTime","currentCol","handleClick","cell","rowIndex","renderCell","Timer","interval","setTimeout","clearTimeout","Game","socketID","getPlayer","time","to","randomNum","setYourColour","setAiColour","yourColour","start","possiblePositions","positions","push","x","y","minimax","depth","alpha","beta","maximizingPlayer","aiColour","humanColour","max","Infinity","min","playerColour","bestMove","aiMove","a","SinglePlayer","difficulty","setDifficulty","console","log","string","DifficultySelect","BackButton","location","useLocation","useHistory","pathname","App","setPlayers","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16217ac6.chunk.js","sourcesContent":["import './css/GameMenu.css';\r\n\r\nconst GameMenu = ({ history }) => {\r\n    return (\r\n        <div id=\"menu\">\r\n            <h1>Connect 4 Online</h1>\r\n            <button onClick={() => history.replace('/game/ai')}>Play against AI</button>\r\n            <button onClick={() => history.replace('/game/create')}>Create Game</button>\r\n            <button onClick={() => history.replace('/game/join')}>Join Game</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameMenu;","import io from 'socket.io-client';\r\nconst socket = io('http://localhost:3001');\r\nexport default socket;","import { useState } from 'react';\r\nimport socket from './socketConfig';\r\nimport '../css/Form.css'\r\n\r\nconst CreateGame = () => {\r\n    const [nickName, setNickName] = useState('');\r\n    const [clicked, setClicked] = useState(false);\r\n    const onChange = e => {\r\n        setNickName(e.target.value);\r\n    }  \r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        setClicked(true);\r\n        socket.emit('create-game', { nickName });\r\n    }\r\n    if (clicked)\r\n        return null;\r\n    return ( \r\n        <div className=\"form\">\r\n            <h1>Create Game</h1>\r\n            <form onSubmit={onSubmit}>\r\n                <label htmlFor=\"nickName\">Enter Nick Name</label>\r\n                <input autoComplete=\"off\" onChange={onChange} type=\"text\" id=\"nickName\" />\r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CreateGame;","import { useState, useEffect } from 'react';\r\nimport socket from './socketConfig';\r\nimport '../css/Form.css'\r\n\r\nconst JoinGame = () => {\r\n    const [nickName, setNickName] = useState('');\r\n    const [gameID, setGameID] = useState('');\r\n    const [error, setError] = useState(false);\r\n    const [clicked, setClicked] = useState(false);\r\n    useEffect(() => {\r\n        socket.on('error', errorMessage => {\r\n            setError(errorMessage);\r\n            setClicked(false);\r\n        });\r\n        return () => socket.off('error');\r\n    }, []);\r\n    const onNameChange = e => {\r\n        setNickName(e.target.value);\r\n    }  \r\n    const onIDChange = e => {\r\n        setGameID(e.target.value);\r\n    }\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        setClicked(true);\r\n        socket.emit('join-game', { nickName, gameID });\r\n    }\r\n    if (clicked)\r\n        return null;\r\n    return ( \r\n        <div className=\"form\">\r\n            <h1>Join Game</h1>\r\n            <form onSubmit={onSubmit}>\r\n                {error && <div class=\"error\">{error}</div>}\r\n                <label htmlFor=\"nickName\">Enter Nick Name</label>\r\n                <input autoComplete=\"off\" value={nickName} onChange={onNameChange} type=\"text\" id=\"nickName\" />\r\n                <label htmlFor=\"gameID\">Enter Room ID</label>\r\n                <input autoComplete=\"off\" value={gameID} onChange={onIDChange} type=\"text\" id=\"gameID\" />\r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JoinGame;","import { useState, useEffect, useRef } from 'react';\r\nimport socket from './socketConfig';\r\nimport '../css/Messages.css';\r\n\r\nconst Messages = ({ gameID, nickName }) => {\r\n    const messagesEndRef = useRef(null);\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    useEffect(() => {\r\n        socket.on('message', msg => {\r\n            setMessages(messages => messages.concat([ msg ]));\r\n        });\r\n        return () => socket.off('message');\r\n    }, []);\r\n    useEffect(scrollToBottom,\r\n        [messages]\r\n    );\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (input === '')\r\n            return;\r\n        const message = nickName + ': ' + input;\r\n        setMessages(messages => messages.concat([ message ]));\r\n        setInput('');\r\n        socket.emit('message', { gameID, message });\r\n    }\r\n    return (\r\n        <div id=\"message-div\">\r\n            <form onSubmit={onSubmit}>\r\n                <label htmlFor=\"message\">Send Message: </label>\r\n                <br></br>\r\n                <input autoComplete=\"off\" type=\"text\" id=\"message\" value={input} onChange={(e) => setInput(e.target.value)} />\r\n                <button>Send</button>\r\n            </form>\r\n            <div id=\"messages\">\r\n                {messages.map((message, index) => (\r\n                    <p key={index}>{message}</p>\r\n                ))}\r\n                <div ref={messagesEndRef} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Messages;","import '../css/PlayerList.css';\r\n\r\nconst PlayerList = ({ playerID, players }) => {\r\n    const renderPlayer = (player) => {\r\n        if (player.colour !== '') {\r\n            return <h2 key={player._id.toString()} className={player.colour + ' highlighted'}>{player.nickName + (player._id === playerID ? ' (you)' : '')}</h2>\r\n        } else {\r\n            return <h2 key={player._id.toString()} className='highlighted'>{player.nickName + (player._id === playerID ? ' (you)' : '')}</h2>\r\n        }\r\n    }\r\n    return (\r\n        <div id=\"playerlist\">\r\n                <h1>Players: </h1>\r\n                {players.map(player => \r\n                    renderPlayer(player)\r\n                )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerList;","import socket from './socketConfig';\r\nimport { useState } from 'react';\r\nimport '../css/StartButton.css';\r\n\r\nconst StartButton = ({ gameID }) => {\r\n    const [clicked, setClicked] = useState(false);\r\n    const startGame = () => {\r\n        setClicked(true);\r\n        socket.emit('start-game', { gameID });\r\n    };\r\n    if (clicked)\r\n        return null;\r\n    return (\r\n        <button id=\"start-button\" onClick={startGame}>Start Game</button>\r\n    );\r\n};\r\n\r\nexport default StartButton;","import StartButton from './StartButton';\r\n\r\nconst GameInfo = ({ game, player, gameOutcome }) => {\r\n    const oppositeColor = () => {\r\n        return player.colour === 'yellow' ? 'red' : 'yellow';\r\n    }\r\n    return (\r\n        <div id=\"info\">\r\n            {gameOutcome ? <h2>{gameOutcome}</h2> : null}\r\n            {game.hasStarted && (player.colour === game.turn ? <h2 className={player.colour + ' highlighted'}>Your turn</h2>\r\n                                                             : <h2 className={oppositeColor(player.colour) + ' highlighted'}>Opponent's turn</h2>)}\r\n            {!game.hasStarted && (game.players.length === 2 ? (player.isHosting ? <StartButton gameID={game._id.toString()}/> : <h2>Waiting for host to start...</h2>)\r\n                                                            : <h2>Waiting for another player...</h2>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameInfo;","const hasWon = (colour, board, width, height) => {\r\n    // check columns\r\n    for (let i = 0; i < width; i++) {\r\n        for (let j = 0; j <= height - 4; j++) {\r\n            if (board[i][j] === colour && board[i][j + 1] === colour && board[i][j + 2] === colour && board[i][j + 3] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    // check rows\r\n    for (let j = 0; j < height; j++) {\r\n        for (let i = 0; i <= width - 4; i++) {\r\n            if (board[i][j] === colour && board[i + 1][j] === colour && board[i + 2][j] === colour && board[i + 3][j] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    // diagonals\r\n    // right down\r\n    for (let i = 0; i <= width - 4; i++) {\r\n        for (let j = 0; j <= height - 4; j++) {\r\n            if (board[i][j] === colour && board[i + 1][j + 1] === colour && board[i + 2][j + 2] === colour && board[i + 3][j + 3] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    // left down\r\n    for (let i = 3; i < width; i++) {\r\n        for (let j = 0; j <= height - 4; j++) {\r\n            if (board[i][j] === colour && board[i - 1][j + 1] === colour && board[i - 2][j + 2] === colour && board[i - 3][j + 3] === colour)\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default hasWon;","const isDraw = (board, width, height) => {\r\n    for (let i = 0; i < width; i++) {\r\n        for (let j = 0; j < height; j++) {\r\n            if (board[i][j] === '')\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport default isDraw;","import { useEffect, useState } from \"react\";\r\nimport '../css/Board.css';\r\nimport socket from './socketConfig'\r\nimport hasWon from '../hasWon';\r\nimport isDraw from '../isDraw';\r\n\r\nconst Board = ({ game, setGame, player, setGameOutcome, timer, setTimer }) => {\r\n    const width = 7;\r\n    const height = 6;\r\n    const generateBoard = () => {\r\n        const matrix = new Array(width);\r\n        for (let i = 0; i < width; i++) {\r\n            matrix[i] = new Array(height).fill('');\r\n        }\r\n        return matrix;\r\n    };\r\n    const [board, setBoard] = useState(generateBoard());\r\n    // run this code once\r\n    useEffect(() => {\r\n        socket.on('restart', () => {\r\n            setGameOutcome(null);\r\n            setBoard(generateBoard());\r\n        });\r\n        socket.on('update-board', ({ row, col, colour }) => {\r\n            setBoard(board => {\r\n                board[col][row] = colour;\r\n                return board;\r\n            });\r\n        });\r\n        return () => {\r\n            socket.off('restart');\r\n            socket.off('update-board');\r\n        };\r\n    }, [setGameOutcome]);\r\n    // runs whenever board is updated/rerendered\r\n    useEffect(() => {\r\n        // if timer has ran out for players turn, make a random move\r\n        if (game.hasStarted && player.colour === game.turn && timer <= 0) {\r\n            while (true) {\r\n                let row = height - 1;\r\n                const column = Math.floor(Math.random() * width);\r\n                while (row >= 0) {\r\n                    if (board[column][row] === '') {\r\n                        makeMove(row, column);\r\n                        return;\r\n                    }\r\n                    row--;\r\n                }\r\n            }\r\n        }\r\n    });\r\n    const makeMove = (row, colIndex) => {\r\n        board[colIndex][row] = player.colour;\r\n        setBoard([...board]);\r\n        socket.emit('update-board', { gameID: game._id.toString(), row, col: colIndex, colour: player.colour });\r\n        // turn over\r\n        if (hasWon(player.colour, board, width, height)) {\r\n            game.hasStarted = false;\r\n            setGameOutcome('You won!');\r\n            socket.emit('game-over', { gameID: game._id.toString(), result: 'You lost!' });\r\n        } else if (isDraw(board, width, height)) {\r\n            game.hasStarted = false;\r\n            setGameOutcome('Draw');\r\n            socket.emit('game-over', { gameID: game._id.toString(), result: 'Draw!' });\r\n        }\r\n        else {\r\n            game.turn = game.turn === 'red' ? 'yellow' : 'red';\r\n            socket.emit('change-turn', { gameID: game._id.toString() });\r\n            setTimer(game.turnTime);\r\n        }\r\n        setGame({ ...game });\r\n    }\r\n    const handleClick = (colIndex) => {\r\n        if (!game.hasStarted || game.turn !== player.colour)\r\n            return;\r\n        let row = height - 1;\r\n        while (row >= 0) {\r\n            if (board[colIndex][row] === '') {\r\n                makeMove(row, colIndex);\r\n                return;\r\n            }\r\n            row--;\r\n        }\r\n    }\r\n    const renderCell = (cell, colIndex, rowIndex) => {\r\n        if (cell !== '') {\r\n            return <div className={'cell ' + cell} key={colIndex + ',' + rowIndex}></div>\r\n        } else {\r\n            return <div className='cell' key={colIndex + ',' + rowIndex}></div>\r\n        }\r\n    }\r\n    return (\r\n        <div id='board'>\r\n            {board.map((currentCol, colIndex) => \r\n                <div className='col' onClick={() => handleClick(colIndex)} key={colIndex}>\r\n                    {board[colIndex].map((cell, rowIndex) => \r\n                        renderCell(cell, colIndex, rowIndex)\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import { useEffect } from 'react';\r\n \r\nconst Timer = ({ timer, setTimer }) => {\r\n    useEffect(() => {\r\n        const interval = setTimeout(() => {\r\n            setTimer(timer => timer - 1);\r\n        }, 1000);\r\n        return () => clearTimeout(interval);\r\n    });\r\n    return ( \r\n        <h2>{timer < 0 ? 0 : timer}</h2>\r\n    );\r\n}\r\n \r\nexport default Timer;","import socket from './socketConfig';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport Messages from './Messages';\r\nimport PlayerList from './PlayerList'\r\nimport GameInfo from './GameInfo';\r\nimport Board from './Board';\r\nimport Timer from './Timer';\r\nimport '../css/Game.css'\r\n\r\n// get the player object corresponding to the socket ID\r\nconst getPlayer = (players) => {\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (players[i].socketID === socket.id)\r\n            return players[i];\r\n    }\r\n    return { _id: '' };\r\n}\r\n\r\nconst Game = ({ game, setGame, players }) => {\r\n    const player = getPlayer(players);\r\n    const [gameOutcome, setGameOutcome] = useState(null);\r\n    const [timer, setTimer] = useState(null);\r\n    useEffect(() => {\r\n        socket.on('game-over', result => setGameOutcome(result));\r\n        socket.on('update-timer', time => setTimer(time));\r\n        socket.on('remove-timer', () => setTimer(null));\r\n        return () => {\r\n            socket.off('game-over');\r\n            socket.off('update-timer');\r\n            socket.off('remove-timer');\r\n            if (player._id !== '') {\r\n                socket.emit('leave-game');\r\n            } \r\n        }\r\n    }, [player._id]);\r\n    if (player._id === '')\r\n        return <Redirect to=\"/\" />;\r\n    return (\r\n        <div id=\"game\">\r\n            <h2>Game Code: {game._id.toString()}</h2>\r\n            <GameInfo game={game} player={player} gameOutcome={gameOutcome} />\r\n            {game.hasStarted && <Timer timer={timer} setTimer={setTimer} />}\r\n            <div id=\"main\">\r\n                <PlayerList playerID={player._id} players={players} />\r\n                <Board game={game} setGame={setGame} player={player} setGameOutcome={setGameOutcome} timer={timer} setTimer={setTimer}/>\r\n                <Messages gameID={game._id.toString()} nickName={player.nickName} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","import { useState } from 'react';\r\nimport '../css/StartButton.css';\r\n\r\nconst randomNum = () => Math.floor(Math.random() * 2); // random num between 0 and 1\r\nconst oppositeColour = (colour) => colour === 'red' ? 'yellow' : 'red'; \r\n\r\nconst StartButton = ({ game, setGame, setYourColour, setAiColour, setGameOutcome }) => {\r\n    const [clicked, setClicked] = useState(false);\r\n    const start = () => {\r\n        const yourColour = randomNum() === 0 ? 'red' : 'yellow';\r\n        setYourColour(yourColour);\r\n        setAiColour(oppositeColour(yourColour));\r\n        game.hasStarted = true;\r\n        game.turn = randomNum() === 0 ? 'red' : 'yellow';\r\n        setGame({...game});\r\n        setGameOutcome(null);\r\n    }\r\n    const startGame = () => {\r\n        setClicked(true);\r\n        start();\r\n    };\r\n    if (clicked)\r\n        return null;\r\n    return (\r\n        <button id=\"start-button\" onClick={startGame}>Start Game</button>\r\n    );\r\n};\r\n\r\nexport default StartButton;","const generateBoard = (width, height) => {\r\n    const matrix = new Array(width);\r\n    for (let i = 0; i < width; i++) {\r\n        matrix[i] = new Array(height).fill('');\r\n    }\r\n    return matrix;\r\n};\r\n\r\nexport default generateBoard;","const possiblePositions = (board) => {\r\n    const positions = [];\r\n    for (let i = 0; i < board.length; i++) {\r\n        let row = board[i].length - 1;\r\n        while (row >= 0) {\r\n            if (board[i][row] === '') {\r\n                positions.push({ x: i, y: row });\r\n                break;\r\n            }\r\n            row--;\r\n        }\r\n    }\r\n    return positions;\r\n}\r\n\r\nexport default possiblePositions;","import hasWon from '../hasWon';\r\nimport isDraw from '../isDraw';\r\nimport possiblePositions from './possiblePositions';\r\n\r\nconst minimax = (board, depth, alpha, beta, maximizingPlayer, aiColour, humanColour, width, height) => {\r\n    if (hasWon(aiColour, board, width, height)) {\r\n        return 1000 + depth;\r\n    } else if (hasWon(humanColour, board, width, height)) {\r\n        return -1000 - depth;\r\n    } else if (isDraw(board, width, height)) {\r\n        return 0;\r\n    } else if (depth === 0) {\r\n        // randomness\r\n        return Math.floor(Math.random() * 200) - 100;\r\n    }\r\n    const positions = possiblePositions(board);\r\n    if (maximizingPlayer) {\r\n        let max = -Infinity;\r\n        for (let i = 0; i < positions.length; i++) {\r\n            board[positions[i].x][positions[i].y] = aiColour;\r\n            const value = minimax(board, depth - 1, alpha, beta, false, aiColour, humanColour, width, height);\r\n            max = Math.max(max, value);\r\n            alpha = Math.max(alpha, value);\r\n            // undo the move\r\n            board[positions[i].x][positions[i].y] = '';\r\n            if (alpha >= beta) break;\r\n        }\r\n        return max;\r\n    } else {\r\n        let min = Infinity;\r\n        for (let i = 0; i < positions.length; i++) {\r\n            board[positions[i].x][positions[i].y] = humanColour;\r\n            const value = minimax(board, depth - 1, alpha, beta, true, aiColour, humanColour, width, height);\r\n            min = Math.min(min, value);\r\n            beta = Math.min(beta, value);\r\n            // undo the move\r\n            board[positions[i].x][positions[i].y] = '';\r\n            if (beta <= alpha) break;\r\n        }\r\n        return min;\r\n    }\r\n}\r\n\r\nexport default minimax;","import { useState, useEffect } from \"react\";\r\nimport '../css/Board.css';\r\nimport hasWon from '../hasWon';\r\nimport isDraw from '../isDraw';\r\nimport generateBoard from '../generateBoard';\r\nimport possiblePositions from './possiblePositions';\r\nimport minimax from './minimax';\r\n\r\nconst Board = ({ depth, game, setGame, playerColour, aiColour, setGameOutcome }) => {\r\n    const width = 7;\r\n    const height = 6;\r\n    const [board, setBoard] = useState(generateBoard(width, height));\r\n    const aiMove = () => {\r\n        let max = -Infinity;\r\n        let bestMove;\r\n        let alpha = -Infinity, beta = Infinity;\r\n        const positions = possiblePositions(board);\r\n        for (let i = 0; i < positions.length; i++) {\r\n            board[positions[i].x][positions[i].y] = aiColour;\r\n            const value = minimax(board, depth - 1, alpha, beta, false, aiColour, playerColour, width, height);\r\n            if (value > max) {\r\n                max = value;\r\n                bestMove = positions[i];\r\n            }\r\n            alpha = Math.max(alpha, value);\r\n            // undo the move\r\n            board[positions[i].x][positions[i].y] = '';\r\n        }\r\n        makeMove(aiColour, bestMove.y, bestMove.x);\r\n    }\r\n    useEffect(() => {\r\n        if (game.hasStarted) {\r\n            setBoard(generateBoard(width, height));\r\n        }\r\n    }, [game.hasStarted]);\r\n    useEffect(() => {\r\n        if (game.hasStarted && game.turn === aiColour) {\r\n            aiMove();\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [board]);\r\n    const makeMove = async (colour, row, colIndex) => {\r\n        board[colIndex][row] = colour;\r\n        setBoard([...board]);\r\n        // turn over\r\n        if (hasWon(colour, board, width, height)) {\r\n            game.hasStarted = false;\r\n            if (colour === playerColour) {\r\n                setGameOutcome('You won!');\r\n            } else {\r\n                setGameOutcome('You lost!');\r\n            }\r\n        } else if (isDraw(board, width, height)) {\r\n            game.hasStarted = false;\r\n            setGameOutcome('Draw');\r\n        }\r\n        else {\r\n            game.turn = game.turn === 'red' ? 'yellow' : 'red';\r\n        }\r\n        setGame({ ...game });\r\n    }\r\n    const handleClick = (colIndex) => {\r\n        if (!game.hasStarted || game.turn !== playerColour)\r\n            return;\r\n        let row = height - 1;\r\n        while (row >= 0) {\r\n            if (board[colIndex][row] === '') {\r\n                makeMove(playerColour, row, colIndex);\r\n                return;\r\n            }\r\n            row--;\r\n        }\r\n    }\r\n    const renderCell = (cell, colIndex, rowIndex) => {\r\n        if (cell !== '') {\r\n            return <div className={'cell ' + cell} key={colIndex + ',' + rowIndex}></div>\r\n        } else {\r\n            return <div className='cell' key={colIndex + ',' + rowIndex}></div>\r\n        }\r\n    }\r\n    return (\r\n        <div id='board'>\r\n            {board.map((currentCol, colIndex) => \r\n                <div className='col' onClick={() => handleClick(colIndex)} key={colIndex}>\r\n                    {board[colIndex].map((cell, rowIndex) => \r\n                        renderCell(cell, colIndex, rowIndex)\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import { useState } from 'react';\r\nimport StartButton from './StartButton';\r\nimport Board from './Board';\r\nimport '../css/SingleplayerGame.css';\r\n\r\nconst SinglePlayer = ({ difficulty, setDifficulty }) => {\r\n    console.log(difficulty);\r\n    const [game, setGame] = useState({ hasStarted: false });\r\n    const [yourColour, setYourColour] = useState(null);\r\n    const [aiColour, setAiColour] = useState(null);\r\n    const [gameOutcome, setGameOutcome] = useState(null);\r\n    return (\r\n        <div id=\"singleplayer\">\r\n            <h2>{difficulty.string}</h2>\r\n            {gameOutcome && <h2>{gameOutcome}</h2>}\r\n            {!game.hasStarted && <StartButton game={game} setGame={setGame} setYourColour={setYourColour} setAiColour={setAiColour} setGameOutcome={setGameOutcome} />}\r\n            {game.hasStarted && (game.turn === yourColour ? <h2 className={yourColour + ' highlighted'}>Your turn!</h2>\r\n                                                          : <h2 className={aiColour + ' highlighted'}>AI's turn!</h2>)}\r\n            <Board depth={difficulty.depth} game={game} setGame={setGame} playerColour={yourColour} aiColour={aiColour} setGameOutcome={setGameOutcome} />\r\n            <button id=\"back\" onClick={() => setDifficulty(null)}>Change difficulty</button>\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default SinglePlayer;","import { useState } from 'react';\r\nimport Game from './Game';\r\nimport '../css/GameMenu.css';\r\n\r\nconst DifficultySelect = () => {\r\n    const [difficulty, setDifficulty] = useState(null);\r\n    const render = () => {\r\n        if (difficulty === null) {\r\n            return (\r\n                <div id=\"menu\">\r\n                    <h1>Select Difficulty</h1>\r\n                    <button onClick={() => setDifficulty({ depth: 3, string: 'Easy' })}>Easy</button>\r\n                    <button onClick={() => setDifficulty({ depth: 5, string: 'Medium' })}>Medium</button>\r\n                    <button onClick={() => setDifficulty({ depth: 7, string: 'Hard' })}>Hard</button>\r\n                </div> \r\n            );\r\n        } else {\r\n            return <Game difficulty={difficulty} setDifficulty={setDifficulty}/>;\r\n        }\r\n    }\r\n    return render();\r\n}\r\n\r\nexport default DifficultySelect;","import { useHistory, useLocation } from 'react-router-dom';\r\n\r\nconst BackButton = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    if (location.pathname === '/')\r\n        return null;\r\n    return ( \r\n        <button id=\"link\" onClick={() => history.replace('/')}>Back to main menu...</button> \r\n    );\r\n}\r\n \r\nexport default BackButton;","import { Route, Switch, useHistory } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport GameMenu from './GameMenu';\nimport CreateGame from './multiplayer/CreateGame';\nimport JoinGame from './multiplayer/JoinGame';\nimport MultiplayerGame from './multiplayer/Game';\nimport DifficultySelect from './singleplayer/DifficultySelect';\nimport BackButton from './BackButton';\nimport socket from './multiplayer/socketConfig';\nimport './css/App.css'\n\nfunction App() {\n    const history = useHistory();\n    const [game, setGame] = useState({});\n    const [players, setPlayers] = useState([]);\n    useEffect(() => {\n        socket.on('update-game', game => setGame(game));\n        socket.on('update-players', players => setPlayers(players));\n        socket.on('update-game-and-players', ({ game, players }) => {\n            setGame(game);\n            setPlayers(players);\n        });\n        socket.on('join-game', () => history.replace('/game/play'));\n    }, [history]);\n    return (\n        <div>\n            <BackButton />\n            <Switch>\n                <Route exact path=\"/\" component={GameMenu} />\n                <Route exact path=\"/game/ai\" component={DifficultySelect} />\n                <Route exact path=\"/game/create\" component={CreateGame} />\n                <Route exact path=\"/game/join\" component={JoinGame} />\n                <Route exact path=\"/game/play\">\n                    <MultiplayerGame game={game} setGame={setGame} players={players} setPlayers={setPlayers}/>\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}